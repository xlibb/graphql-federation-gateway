/*
 * Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - GraphQl Federation Gateway'

def packageName = "graphql-federation-gateway"
def packageOrg = "Ishad-M-I-M"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")
def distName = "ballerina-${ballerinaLangVersion}-swan-lake"
def distributionBinPath = "${project.rootDir}/build/${distName}/bin"

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

task updateTomlFiles {
    doLast {
        ballerinaTomlFile.text = ballerinaTomlFilePlaceHolder.text
                .replace("@project.version@", project.version)
                .replace("@toml.version@", tomlVersion)
                .replace("@graphql.java.version@", graphqlJavaVersion)
                .replace("@graphql.java.extended.scalars.version@", graphqlJavaExtendedScalarVersion)
                .replace("@commons.io.version@", commonsIoVersion)
                .replace("@ballerina.lang.version@", ballerinaLangVersion)
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml"
            }
        }
    }
}


task ballerinaBuild {
    dependsOn(updateTomlFiles)
    finalizedBy(commitTomlFiles)
    doLast {
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            def balHomePath = "${project(':gateway-native').ext.balHomePath}/bin"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "\"${balHomePath}/bal.bat\" build && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "${balHomePath}/bal build"
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: "${projectDir}/target/bin/graphql_federation_gateway.jar", extension: 'jar'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${packageOrg}/${packageName}")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

configurations {
    externalJars
}

dependencies {
    externalJars "com.graphql-java:graphql-java:${graphqlJavaVersion}"
    externalJars "com.graphql-java:graphql-java-extended-scalars:${graphqlJavaExtendedScalarVersion}"
    externalJars "commons-io:commons-io:${commonsIoVersion}"
    externalJars "org.ballerinalang:formatter-core:${ballerinaLangVersion}"
    externalJars "org.ballerinalang:ballerina-lang:${ballerinaLangVersion}"
    externalJars "org.ballerinalang:ballerina-tools-api:${ballerinaLangVersion}"
    externalJars "org.ballerinalang:ballerina-parser:${ballerinaLangVersion}"
}

task copyToLib(type: Copy) {
    if (project.configurations.find { it.name == "externalJars" }) {
        into "${projectDir}/lib"
        from project.configurations.externalJars
    } else {
        println "No external jars found"
    }
}

task build {
    dependsOn(ballerinaBuild)
}

task clean {
    delete("${projectDir}/target")
}

ballerinaBuild.dependsOn ":gateway-native:build"
ballerinaBuild.dependsOn copyToLib
publishToMavenLocal.dependsOn build
publish.dependsOn build
